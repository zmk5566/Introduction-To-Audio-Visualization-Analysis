declare name        "Spherical Grids library";
declare version     "1.1";
declare author      "Pierre Lecomte";
declare license     "CC-BY-NC-SA-4.0";
declare copyright   "(c) Pierre Lecomte 2020";

// Changelog
// (2021-04-24)
// - Revert to azimuth-elevation spherical coordinate system $(\theta, \phi)$.
// 1.1 (2020-09-05)
// - Order of nodes lebedev(N,i,x) are changed in comparision to MemsBedev config : in the new ordering, "face" and "edge" nodes are swapped compared to MemsBedev config
// - Merging of olds libraries lebedev.lib, eigenmike32.lib
// - Spherical coordinate system with zenith angle $\phi$.

//#################################### grids.lib #######################################
// A library that provides the directions $(\theta, \phi)$ and weights $w$ of several spherical grids, used in Spherical Microphone Arrays (SMA) configurations, or for regular decoders.
// Each grid works up to a specific degree $L$ of decomposition for a band limited function ($ \leq L$) on the sphere. If the function on the sphere is not band-limited, as the acoustic pressure, spatial aliasing occurs[^lecomte].
//
// [^eigenmike]: [https://mhacoustics.com/sites/default/files/ReleaseNotes.pdf](https://mhacoustics.com/sites/default/files/ReleaseNotes.pdf)
// [^zylia]: [https://www.zylia.co/white-paper.html](https://www.zylia.co/white-paper.html)
// [^lecomte]: P. Lecomte, P.-A. Gauthier, C. Langrenne, A. Berry, et A. Garcia, « A Fifty-Node Lebedev Grid and Its Applications to Ambisonics », Journal of the Audio Engineering Society, vol. 64, nᵒ 11, p. 868‑881, 2016.
// [^lebedev]: V. I. Lebedev, « Quadratures on a sphere », USSR Computational Mathematics and Mathematical Physics, vol. 16, nᵒ 2, p. 10‑24, 1976.
// [^rafaely]: B. Rafaely, Fundamentals of Spherical Array Processing, 2nd éd. Springer, 2019.

//######################################################################################


import("stdfaust.lib");

//=============================Functions========================================
//==============================================================================

//---`lebedev(N, i, x)`---
// Gives the direction or weight of a $N$-node Lebedev grid. 
// The Lebedev grids allows for an exact integration of spherical harmonics on the sphere up to a degree $L$[^lebedev]. In the current implementation, 4 grids are provided as follows:
//
// | Number of Nodes $N$ | Maximum working degree $L$ |
// |:-------------------:|:--------------------------:|
// |          6          |              1             |
// |          14         |              2             |
// |          26         |              3             |
// |          50         |              5             |
//
// Note that the grid are nested[^lecomte]: The first $6$ nodes of `lebedev(50, i, x)` corresponds to the $6$ nodes of `lebedev(6, i, x)`, 
// the first $14$ nodes of `lebedev(50, i, x)` corresponds to the $14$ nodes of `lebedev(14, i, x)`, and so on.
// <div style="width:50%; margin:0 auto;" align="center" markdown="1">
// {% figure caption: "Lebedev grid with 6 nodes (black), 14 nodes (black + green), 26 nodes (black + green + blue), 50 nodes (black + green + blue + red)." label:lebedev%}
// ![Image]({{site.baseurl}}/assets/docs/lebedev50.png){:.rounded.border.shadow}
// {%endfigure%}
// </div>
// The nodes are indexed by the following order of priority: category, then polar angle $\phi$, then Azimuth angle $\theta$. 
// Each node's direction is given in the following table. An illustration is shown in Fig.{% figref lebedev %}.
//
// | Node index $i$ | Azimuth $\theta$ ($^\circ$) | Elevation $\phi$ ($^\circ$) |
// |:--------------:|:---------------------------:|:---------------------------:|
// | 0  | 0    | 90  |
// | 1  | 0    | 0   |
// | 2  | 90   | 0   |
// | 3  | 180  | 0   |
// | 4  | -90  | 0   |
// | 5  | 0    | -90 |
// | 6  | 45   | 35  |
// | 7  | 135  | 35  |
// | 8  | -135 | 35  |
// | 9  | -45  | 35  |
// | 10 | 45   | -35 |
// | 11 | 135  | -35 |
// | 12 | -135 | -35 |
// | 13 | -45  | -35 |
// | 14 | 0    | 45  |
// | 15 | 90   | 45  |
// | 16 | 180  | 45  |
// | 17 | -90  | 45  |
// | 18 | 45   | 0   |
// | 19 | 135  | 0   |
// | 20 | -135 | 0   |
// | 21 | -45  | 0   |
// | 22 | 0    | -45 |
// | 23 | 90   | -45 |
// | 24 | 180  | -45 |
// | 25 | -90  | -45 |
// | 26 | 45   | 65  |
// | 27 | 135  | 65  |
// | 28 | -135 | 65  |
// | 29 | -45  | 65  |
// | 30 | 18   | 18  |
// | 31 | 72   | 18  |
// | 32 | 108  | 18  |
// | 33 | 162  | 18  |
// | 34 | -162 | 18  |
// | 35 | -108 | 18  |
// | 36 | -72  | 18  |
// | 37 | -18  | 18  |
// | 38 | 18   | -18 |
// | 39 | 72   | -18 |
// | 40 | 108  | -18 |
// | 41 | 162  | -18 |
// | 42 | -162 | -18 |
// | 43 | -108 | -18 |
// | 44 | -72  | -18 |
// | 45 | -18  | -18 |
// | 46 | 45   | -65 |
// | 47 | 135  | -65 |
// | 48 | -135 | -65 |
// | 49 | -45  | -65 |
//
//
// Usage: `lebedev(N, i, x)` where:
// - `N`: number of node. $N \in \\{ 6, 14, 26, 50\\}$.
// - `i`: node index, with $0 \leq i < N$.
// - `x`: node direction or weight, as follows:
//    - `0`: node azimuth angle $\theta$,
//    - `1`: node elevation angle $\phi$,
//    - `2`: node weight.
//---
lebedev(N, i, x) = case {
                        (6, 0) => ba.take(x + 2, cart2spher(ba.take(1, node(i)), ba.take(2, node(i)), ba.take(3, node(i))))
                                with {
                                    node(i) = vertex(i);
                                    };
                        (6, 1) => weight(6, 0);
                        
                        (14, 0) => ba.take(x + 2, cart2spher(ba.take(1, node(i)), ba.take(2, node(i)), ba.take(3, node(i))))
                                with { 
                                    node(i) = case {
                                                    (0) => face(i - 6); 
                                                    (1) => vertex(i); 
                                                   }(i < 6);
                                     };
                        (14, 1) => case {
                                        (0) => weight(14, 1);
                                        (1) => weight(14, 0);
                                        }(i < 6);
                                        
                        (26, 0) => ba.take(x + 2, cart2spher(ba.take(1, node(i)), ba.take(2, node(i)), ba.take(3, node(i))))
                                with {
                                    node(i) = case {
                                                    (1, 1) => vertex(i);
                                                    (0, 1) => face(i - 6);
                                                    (0, 0) => edge(i - 14);                    
                                                }(i < 6, i < 14);
                                    };
                        (26, 1) => case {
                                        (1, 1) => weight(26, 0);
                                        (0, 1) => weight(26, 1);
                                        (0, 0) => weight(26, 2);
                                        }(i < 6, i < 14);
                        (50, 0) => ba.take(x + 2, cart2spher(ba.take(1, node(i)), ba.take(2, node(i)), ba.take(3, node(i))))
                                with {
                                    node(i) = case {
                                                    (1, 1, 1) => vertex(i);
                                                    (0, 1, 1) => face(i - 6);
                                                    (0, 0, 1) => edge(i - 14);
                                                    (0, 0, 0) => bissector(i - 26, 3 / sqrt(11)); // m = 3 / sqrt(11)
                                                }(i < 6, i < 14, i < 26);
                                     };
                        (50, 1) => case {
                                        (1, 1, 1) => weight(50, 0);
                                        (0, 1, 1) => weight(50, 1);
                                        (0, 0, 1) => weight(50, 2);
                                        (0, 0, 0) => weight(50, 3);
                                        }(i < 6, i < 14, i < 26);
                    }(N, x == 2) // test is node weight is required, if not, coordinates are required
                    with {
                    
                    vertex(0) = (0, 0, 1);
                    vertex(1) = (1, 0, 0);
                    vertex(2) = (0, 1, 0);
                    vertex(3) = (-1, 0, 0);
                    vertex(4) = (0, -1, 0);
                    vertex(5) = (0, 0, -1);
                    
                    weight(6, 0) = 1 / 6; // weights for "vertex" type node for N = 6.
                    weight(14, 0) = 1 / 15; // weights for "vertex" type node for N = 14.
                    weight(26, 0) = 1 / 21; // weights for "vertex" type node for N = 26.
                    weight(50, 0) = 4 / 315; // weights for "vertex type node for N = 50.
                    
                    face(0) = (1 / sqrt(3), 1 / sqrt(3), 1 / sqrt(3));
                    face(1) = (-1 / sqrt(3), 1 / sqrt(3), 1 / sqrt(3));
                    face(2) = (-1 / sqrt(3), -1 / sqrt(3), 1 / sqrt(3));
                    face(3) = (1 / sqrt(3), -1 / sqrt(3), 1 / sqrt(3));
                    face(4) = (1 / sqrt(3), 1 / sqrt(3), -1 / sqrt(3));
                    face(5) = (-1 / sqrt(3), 1 / sqrt(3), -1 / sqrt(3));
                    face(6) = (-1 / sqrt(3), -1 / sqrt(3), -1 / sqrt(3));
                    face(7) = (1 / sqrt(3), -1 / sqrt(3), -1 / sqrt(3));

                    weight(14, 1) = 3 / 4; // weights for "face" type node for N = 14.
                    weight(26, 1) = 9 / 280; // weights for "face" type node for N = 26.
                    weight(50, 1) = 27 / 1280; // weights for "face" type node for N = 50.
                    
                    edge(0) = (1 / sqrt(2), 0, 1 / sqrt(2));
                    edge(1) = (0, 1 / sqrt(2), 1 / sqrt(2));
                    edge(2) = (-1 / sqrt(2), 0, 1 / sqrt(2));
                    edge(3) = (0, -1 / sqrt(2), 1 / sqrt(2));
                    edge(4) = (1 / sqrt(2), 1 / sqrt(2), 0);
                    edge(5) = (-1 / sqrt(2), 1 / sqrt(2), 0);
                    edge(6) = (-1 / sqrt(2), -1 / sqrt(2), 0);
                    edge(7) = (1 / sqrt(2), -1 / sqrt(2), 0);
                    edge(8) = (1 / sqrt(2), 0, -1 / sqrt(2));
                    edge(9) = (0, 1 / sqrt(2), -1 / sqrt(2));
                    edge(10) = (-1 / sqrt(2), 0, -1 / sqrt(2));
                    edge(11) = (0, -1 / sqrt(2), -1 / sqrt(2));
                    
                    weight(26, 2) = 4 / 105; // weights for "edge" type node for N = 26.
                    weight(50, 2) = 64 / 2835; // weights for "edge" type node for N = 50.
                    
                    // nodes along the bissector of a face
                    bissector(i, m) = case{
                                        (0) => (l, l, m);
                                        (1) => (-l, l, m);
                                        (2) => (-l, -l, m);
                                        (3) => (l, -l, m);
                                        (4) => (m, l, l);
                                        (5) => (l, m, l);
                                        (6) => (-l, m, l);
                                        (7) => (-m, l, l);
                                        (8) => (-m, -l, l);
                                        (9) => (-l, -m, l);
                                        (10) => (l, -m, l);
                                        (11) => (m, -l, l);
                                        (12) => (m, l, -l);
                                        (13) => (l, m, -l);
                                        (14) => (-l, m, -l);
                                        (15) => (-m, l, -l);
                                        (16) => (-m, -l, -l);
                                        (17) => (-l, -m, -l);
                                        (18) => (l, -m, -l);
                                        (19) => (m, -l, -l);
                                        (20) => (l, l, -m);
                                        (21) => (-l, l, -m);
                                        (22) => (-l, -l, -m);
                                        (23) => (l, -l, -m);   
                                            }(i) 
                                            with {
                                            l = 1 / sqrt(2) * sqrt(1 - m^2); 
                                            };
                    weight(50, 3) = 11^4 / 725760; // weights for "bissector" type node for N = 50.                      
                    };





//---`em32(i,x)`---
// Gives the direction or weight for a 32-node mh acoustics em32 Eigenmike&reg; SMA. The grid corresponds to a Pentakis-Dodecahedron. 
// <div style="width:50%; margin:0 auto;" align="center" markdown="1">
// {% figure caption: "em32 Eigenmike&reg with 32 nodes." label:em32%}
// ![Image]({{site.baseurl}}/assets/docs/em32.png){:.rounded.border.shadow}
// {%endfigure%}
// </div>
// The node are sorted according to the em32 documentation[^eigenmike].
// Each node's direction is given in the following table. An illustration is shown in Fig.{% figref em32 %}. The grid works up to degree $L=4$.
//
// | Node index $i$ | Azimuth $\theta$ \($^\circ$\) | Elevation $\phi$ ($^\circ$)    |
// |:--------------:|:-----------------------------:|:---------------------------:|
// | 0  | 0    | 21  |
// | 1  | 32   | 0   |
// | 2  | 0    | -21 |
// | 3  | -32  | 0   |
// | 4  | 0    | 58  |
// | 5  | 45   | 35  |
// | 6  | 69   | 0   |
// | 7  | 45   | -35 |
// | 8  | 0    | -58 |
// | 9  | -45  | -35 |
// | 10 | 291  | 0   |
// | 11 | -45  | 35  |
// | 12 | 91   | 69  |
// | 13 | 90   | 32  |
// | 14 | 90   | -31 |
// | 15 | 89   | -69 |
// | 16 | 180  | 21  |
// | 17 | -148 | 0   |
// | 18 | 180  | -21 |
// | 19 | 148  | 0   |
// | 20 | 180  | 58  |
// | 21 | -135 | 35  |
// | 22 | -111 | 0   |
// | 23 | -135 | -35 |
// | 24 | 180  | -58 |
// | 25 | 135  | -35 |
// | 26 | 111  | 0   |
// | 27 | 135  | 35  |
// | 28 | -91  | 69  |
// | 29 | -90  | 32  |
// | 30 | -90  | -32 |
// | 31 | -89  | -69 |
//
// Usage: `em32(i,x)` where:
// - `i`: node index, with $0 \leq i \leq 31$.
// - `x`: node direction or weight, as follows:
//    - `0`: node azimuth angle $\theta$,
//    - `1`: node elevation angle $\phi$,
//    - `2`: node weight.
//---
em32(i,x) = case {
                (0) => ba.take(x + 1, node(i));
                (1) => weight(i);
             }(x == 2)
             with {
                weight(i) = 1/32; // all nodes have the same weight
                node(0) = (0, 69);
                node(1) = (32, 90);
                node(2) = (0, 111);
                node(3) = (328, 90);
                node(4) = (0, 32);
                node(5) = (45, 55);
                node(6) = (69, 90);
                node(7) = (45, 125);
                node(8) = (0, 148);
                node(9) = (315, 125);
                node(10) = (291, 90);
                node(11) = (315, 55);
                node(12) = (91, 21);
                node(13) = (90, 58);
                node(14) = (90, 121);
                node(15) = (89, 159);
                node(16) = (180, 69);
                node(17) = (212, 90);
                node(18) = (180, 111);
                node(19) = (148, 90);
                node(20) = (180, 32);
                node(21) = (225, 55);
                node(22) = (249, 90);
                node(23) = (225, 125);
                node(24) = (180, 148);
                node(25) = (135, 125);
                node(26) = (111, 90);
                node(27) = (135, 55);
                node(28) = (269, 21);
                node(29) = (270, 58);
                node(30) = (270, 122);
                node(31) = (271, 159);
             };
                                

//---`zm1(i,x)`---
// Gives the direction for a 19-node Zylia ZM-1 SMA. The grid corresponds to a Dodecahedron minus a node. 
// <div style="width:50%; margin:0 auto;" align="center" markdown="1">
// {% figure caption: "Zylia ZM-1 grid with 19 nodes." label:zm1%}
// ![Image]({{site.baseurl}}/assets/docs/zm1.png){:.rounded.border.shadow}
// {%endfigure%}
// </div>
// The node are sorted according to the Zylia ZM-1 documentation[^zylia]. Each node's direction is given in the following table. An illustration is shown in Fig.{% figref zm1 %}.
//
// | Node index $i$ | Azimuth $\theta$ ($^\circ$) | Elevation $\phi$ ($^\circ$) |
// |:--------------:|:---------------------------:|:---------------------------:|
// | 0  | 0    | 90  |
// | 1  | 0    | 48  |
// | 2  | 120  | 48  |
// | 3  | -120 | 48  |
// | 4  | -82  | 19  |
// | 5  | -38  | 19  |
// | 6  | 38   | 19  |
// | 7  | 82   | 19  |
// | 8  | 158  | 19  |
// | 9  | -158 | 19  |
// | 10 | -142 | -19 |
// | 11 | -98  | -19 |
// | 12 | -22  | -19 |
// | 13 | 22   | -19 |
// | 14 | 98   | -19 |
// | 15 | 142  | -19 |
// | 16 | -180 | -48 |
// | 17 | -60  | -48 |
// | 18 | 60   | -48 |

//
// This grid works well up to degree $L = 3$ using [`zm1dsft`](#zm1dsfti).
//
// Usage: `zm1(i,x)` where:
// - `i`: node index, with $0 \leq i \leq 18$.
// - `x`: node direction or weight, as follows:
//    - `0`: node azimuth angle $\theta$,
//    - `1`: node elevation angle $\phi$,
//---
zm1(i,x) = case {
                (0) => ba.take(1, node(i)) * ma.PI/180;
                (1) => ba.take(2, node(i)) * ma.PI/180;
                (2) => weight(i);
             }(x)
             with {
                //weight(i) = 1/19; // all nodes have the same weight
                node(0) = (0, 90);
                node(1) = (0, 48);
                node(2) = (120, 48);
                node(3) = (-120, 48);
                node(4) = (-82, 19);
                node(5) = (-38, 19);
                node(6) = (38, 19);
                node(7) = (82, 19);
                node(8) = (158, 19);
                node(9) = (-158, 19);
                node(10) = (-142, -19);
                node(11) = (-98, -19);
                node(12) = (-22, -19);
                node(13) = (22, -19);
                node(14) = (98, -19);
                node(15) = (142, -19);
                node(16) = (-180, -48);
                node(17) = (-60, -48);
                node(18) = (60, -48);
             };
             
//---`zm1dsft(i)`---
// Returns the $i$-th line of the Discrete Spherical Fourier Transform (DSFT) matrix (or encoding matrix) for the [zm1](#zm1ix) grid, 
// i.e. the matrix that projects the acoustic pressures measured by the [zm1](#zm1ix) SMA on the spherical harmonics. 
// This matrix, denoted $\mathbf{Y}_\text{DSHT} \in \mathbb{R}^{(L+1)^2 \times Q}$ is defined as the Moore-Penrose pseudo-inverse of the matrix $\mathbf{Y} \in \mathbb{R}^{Q \times (L+1)^2}$ of spherical harmonics evaluated up to the degree $L=3$ in the $Q=19$ directions of the [zm1](#zm1ix) grid nodes[^rafaely]:
//
// $$\begin{equation}
// \mathbf{Y}_\text{DSFT} = \mathbf{Y}^\dagger = (\mathbf{Y}^T \mathbf{Y})^{-1} \mathbf{Y}^T,
// \end{equation}$$
//
// where $^T$ is the transpose operator and
//
// $$\begin{equation}
// \mathbf{Y} = 
// \left[
// \begin{array}{ccc}
// Y_{0,0}(\theta_0,\phi_0) & \cdots & Y_{L,L}(\theta_0, \phi_0) \\
// \vdots & \vdots & \vdots \\
// Y_{0,0}(\theta_{Q-1}, \phi_{Q-1}) & \cdots & Y_{L,L}(\theta_{Q-1}, \phi_{Q-1})
// \end{array}
// \right].
// \end{equation}$$
//
// Usage: `zm1dsft(i)` where:
// - i: row number with $[0 \leq i \leq 15]$.
zm1dsft(0) = (0, 0.0849034, 0.0849034, 0.0849034, 0.0408817, 0.0408817, 0.0408817, 0.0408817, 0.0408817, 0.0408817, 0.0408817, 0.0408817, 0.0408817, 0.0408817, 0.0408817, 0.0408817, 0.0849034, 0.0849034, 0.0849034);
zm1dsft(1) = (0, 0, 0.0524678, -0.0524678, -0.0792524, -0.0511441, 0.0511441, 0.0792524, 0.0281083, -0.0281083, -0.0511441, -0.0792524, -0.0281083, 0.0281083, 0.0792524, 0.0511441, 0, -0.0524678, 0.0524678);
zm1dsft(2) = (0.172924, 0.00790674, 0.00790674, 0.00790674, 0.0430576, 0.0430576, 0.0430576, 0.0430576, 0.0430576, 0.0430576, -0.0141423, -0.0141423, -0.0141423, -0.0141423, -0.0141423, -0.0141423, -0.123379, -0.123379, -0.123379);
zm1dsft(3) = (0, 0.0605847, -0.0302923, -0.0302923, 0.0132997, 0.0619848, 0.0619848, 0.0132997, -0.0752845, -0.0752845, -0.0619848, -0.0132997, 0.0752845, 0.0752845, -0.0132997, -0.0619848, -0.0605847, 0.0302923, 0.0302923);
zm1dsft(4) = (0, 0, -0.0372177, 0.0372177, -0.0234967, -0.0829507, 0.0829507, 0.0234967, -0.059454, 0.059454, 0.0829507, 0.0234967, -0.059454, 0.059454, -0.0234967, -0.0829507, 0, -0.0372177, 0.0372177);
zm1dsft(5) = (0, 0, 0.0849073, -0.0849073, -0.0600328, -0.037227, 0.037227, 0.0600328, 0.0228058, -0.0228058, 0.037227, 0.0600328, 0.0228058, -0.0228058, -0.0600328, -0.037227, 0, 0.0849073, -0.0849073);
zm1dsft(6) = (0, 0.111346, 0.111346, 0.111346, -0.0556731, -0.0556731, -0.0556731, -0.0556731, -0.0556731, -0.0556731, -0.0556731, -0.0556731, -0.0556731, -0.0556731, -0.0556731, -0.0556731, 0.111346, 0.111346, 0.111346);
zm1dsft(7) = (0, 0.0980425, -0.0490213, -0.0490213, 0.0083261, 0.0478268, 0.0478268, 0.0083261, -0.0561529, -0.0561529, 0.0478268, 0.0083261, -0.0561529, -0.0561529, 0.0083261, 0.0478268, 0.0980425, -0.0490213, -0.0490213);
zm1dsft(8) = (0, 0.0429753, -0.0214876, -0.0214876, -0.0822174, 0.0207599, 0.0207599, -0.0822174, 0.0614575, 0.0614575, 0.0207599, -0.0822174, 0.0614575, 0.0614575, -0.0822174, 0.0207599, 0.0429753, -0.0214876, -0.0214876);
zm1dsft(9) = (0, 0, 0, 0, 0.0515928, -0.0515928, 0.0515928, -0.0515928, 0.0515928, -0.0515928, -0.0515928, 0.0515928, -0.0515928, 0.0515928, -0.0515928, 0.0515928, 0, 0, 0);
zm1dsft(10) = (0, 0, 0, 0, 0.0170266, -0.096406, 0.096406, -0.0170266, -0.113433, 0.113433, -0.096406, 0.0170266, 0.113433, -0.113433, -0.0170266, 0.096406, 0, 0, 0);
zm1dsft(11) = (0, 0, 0.119335, -0.119335, 0.0633038, -0.0550274, 0.0550274, -0.0633038, -0.118331, 0.118331, -0.0550274, 0.0633038, 0.118331, -0.118331, -0.0633038, 0.0550274, 0, -0.119335, 0.119335);
zm1dsft(12) = (0.264759, -0.131371, -0.131371, -0.131371, 0.00341271, 0.00341271, 0.00341271, 0.00341271, 0.00341271, 0.00341271, 0.0408588, 0.0408588, 0.0408588, 0.0408588, 0.0408588, 0.0408588, -0.0454249, -0.0454249, -0.0454249);
zm1dsft(13) = (0, 0.137796, -0.0688979, -0.0688979, 0.100089, -0.104867, -0.104867, 0.100089, 0.00477841, 0.00477841, 0.104867, -0.100089, -0.00477841, -0.00477841, -0.100089, 0.104867, -0.137796, 0.0688979, 0.0688979);
zm1dsft(14) = (0, 0, 0, 0, -0.12115, 0.0753206, 0.0753206, -0.12115, 0.0458297, 0.0458297, -0.0753206, 0.12115, -0.0458297, -0.0458297, 0.12115, -0.0753206, 0, 0, 0);
zm1dsft(15) = (-0.256058, 0.200535, 0.200535, 0.200535, -0.0871649, -0.0871649, -0.0871649, -0.0871649, -0.0871649, -0.0871649, 0.0443483, 0.0443483, 0.0443483, 0.0443483, 0.0443483, 0.0443483, -0.0295491, -0.0295491, -0.0295491);

//---`cart2spher(x,y,z)`---
// Computes the spherical coordinates $(r, \theta, \phi)$ from the Cartesian coordinates $(x, y, z)$ as:
//
// $$\begin{equation}
// \begin{aligned}
// & r = \sqrt{x^2 + y^2 + z^2} \\
// & \theta = \arctan\left( \frac{y}{x}  \right) \\
// & \phi =  \arcsin\left( \frac{z}{r} \right)
// \end{aligned}
// \end{equation}$$
//
//---
cart2spher(x, y, z) = (r, t, p)
                    with{
                    rtemp = sqrt(x^2 + y^2 + z^2);
                    r = rtemp, 1 : select2(rtemp == 0); // avoids r=0
                    t = atan2(y, x);
                    p = asin(z/r);
                    };
